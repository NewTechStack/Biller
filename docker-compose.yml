version: '3'
networks:
  proxy:
  dbnet:
    internal: true

services:
  nginx:
    image: jwilder/nginx-proxy:1.0-alpine
    container_name: nginx
    restart: always
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./app/proxy/logs/global:/var/log/nginx
      - ./app/proxy/conf/:/etc/nginx/conf.d/
      - ./app/proxy/vhost:/etc/nginx/vhost.d
      - ./app/proxy/passwd:/etc/nginx/htpasswd
      - ./app/proxy/data/html:/usr/share/nginx/html
      - ./app/proxy/data/certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion:2.2
    container_name: letsencrypt
    volumes:
      - ./app/proxy/vhost:/etc/nginx/vhost.d
      - ./app/proxy/data/html:/usr/share/nginx/html
      - ./app/proxy/data/certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - nginx
    networks:
      - proxy

  front:
    build:
      context: ./front/
      dockerfile: Dockerfile
    container_name: biller-front
    tty: true
    restart: always
    depends_on:
      rethink:
        condition: "service_started"
    networks:
      - proxy
      - dbnet
    ports:
      - 8079:80
    healthcheck:
      test: exit $$( curl -so /dev/null --fail http://127.0.0.1:8080 && echo 0 || echo 1 )
      interval: 30s
      timeout: 1s
      retries: 1
    environment:
      REACT_APP_API_ENDPOINT: 'https://ged2.smartdom.ch/api'
      REACT_APP_STORAGE_ENDPOINT: 'https://ged2.smartdom.ch/files'
      VIRTUAL_HOST: ged2.smartdom.ch
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: ged2.smartdom.ch
      LETSENCRYPT_EMAIL: eliot.courtel@wanadoo.fr

  back:
    build:
      context: ./back/
      dockerfile: Dockerfile
    container_name: biller-back
    tty: true
    restart: always
    depends_on:
      rethink:
        condition: "service_started"
#     depends_on:
#       template:
#         condition: "service_started"
    networks:
      - proxy
      - dbnet
    ports:
      - 8080:8080
    healthcheck:
      test: exit $$( curl -so /dev/null --fail http://127.0.0.1:8080 && echo 0 || echo 1 )
      interval: 30s
      timeout: 1s
      retries: 1
    volumes:
      - ./back/src:/home/api:ro
      - ./back/source:/source:ro

  rethink:
    image: rethinkdb:latest
    container_name: biller-rethink
    restart: always
    ports:
      - 8081:8080
      - 28015:28015
    volumes:
      - ./db/rethink/data:/data:rw
    command: rethinkdb --join rethink2 --bind all -d /data --server-tag primary --server-name rethink
    networks:
      - dbnet
      - proxy
      
  rethink2:
    image: rethinkdb:latest
    container_name: biller-rethink
    restart: always
    ports:
      - 8081:8080
      - 28015:28015
    volumes:
      - ./db/rethink/data:/data:rw
    command: rethinkdb --join rethink --bind all --server-tag primary --server-name rethink
    networks:
      - dbnet
      - proxy

  qr:
    build:
      context: ./swiss_qr/
      dockerfile: Dockerfile
    expose:
      - 8080
    networks:
      - dbnet

  template:
    build:
      context: ./document/
      dockerfile: Dockerfile
    container_name: biller-template
    tty: true
    restart: always
    depends_on:
      pdfgenerator:
        condition: "service_started"
    depends_on:
      minio:
        condition: "service_started"
    networks:
      - dbnet
    healthcheck:
      test: exit $$( curl -so /dev/null --fail http://127.0.0.1:8080 && echo 0 || echo 1 )
      interval: 30s
      timeout: 1s
      retries: 1
    volumes:
      - ./document/src:/home/api

  pdfgenerator:
    image: kurzdigital/html-to-pdf
    container_name: biller-pdfgenerator
    tty: true
    restart: always
    networks:
      - dbnet
    expose:
      - 8080
    healthcheck:
      test: exit $$( curl -so /dev/null --fail http://127.0.0.1:8080 && echo 0 || echo 1 )
      interval: 30s
      timeout: 1s
      retries: 1

  minio:
    image: quay.io/minio/minio
    container_name: biller-minio
    command: server /data --console-address "0.0.0.0:80" --address "0.0.0.0:8080"
    networks:
      - proxy
      - dbnet
    expose:
      - "80"
    ports:
      - 8084:80
      - 8083:8080
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: adminadmin
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_BROWSER_REDIRECT_URL : http://146.59.155.94:8084
      MINIO_SERVER_URL : http://146.59.155.94:8083
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./document/data:/data:rw

  createbuckets:
    image: minio/mc
    container_name: biller-minio-auto
    depends_on:
      - minio
    networks:
      - dbnet
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:8080 admin adminadmin;
      /usr/bin/mc mb myminio/files;
      /usr/bin/mc policy set public myminio/files;
      /usr/bin/mc mb myminio/previews;
      /usr/bin/mc policy set public myminio/previews;
      /usr/bin/mc mb myminio/reports;
      /usr/bin/mc policy set public myminio/reports;
      exit 0;
      "
